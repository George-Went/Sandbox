from flask import request


from app.models import Container, Group, GroupContainer

from flask_appbuilder import Model
from flask_appbuilder import ModelRestApi
from flask_appbuilder.api import BaseApi, expose
from flask_appbuilder.security.decorators import protect
from flask_appbuilder.models.sqla.interface import SQLAInterface

import docker 
import docker.errors as errors
from docker.types import containers

docker_client = docker.from_env()

# This class allows us to use the pre-existing "ModelRestApi" from flask-appbuilder to set up CRUD functionality
# The resource_name is used as the URI destination e.g. "localhost/api/v1/container/"
# The data model defines where the databases schemas are and what is use to abstaract them (in this case SQL_alchemy)

# These API's are AUTO-GENERATED by flask-appbuilder and import "ModelRestAPI" and have a pre-set number of endpoints
# They are for changing database data only - neither api class touches local docker containers
class ContainerModelApi(ModelRestApi):
    resource_name = "container"
    datamodel = SQLAInterface(Container)

    @expose("/", methods=["POST"])
    @protect()
    # TODO: trigger container to run after being created 
    # TODO: Refactor docker api call into docker_api.py 
    def create_container(self):

        from app import db

        result = []

        # server-side validation 
        new_name = request.json.get('name')
        if (new_name == ''):
            return self.response(422, result="Container name cannpt be empty")

        existing_container = db.session.query(Container).filter(Container.name == new_name).first()
        if (existing_container):
            return self.response(422, result="Cannot create container, container name already exists")
        

        try:
            docker_container = docker_client.containers.create(
                command = request.json.get('command'), # Ex: /bin/bash -c npm install && npm run serve
                entrypoint = request.json.get('entrypoint'), # Ex: null
                environment = request.json.get('environment'), # Ex: NODE_VERSION=10.15.1   PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin   YARN_VERSION=1.13.0
                image = request.json.get('image'), # Ex: sha256:a269e43b87cb0c13b67046fa0d51a483681051ff6678e42aa72d74b948d36f8e
                name = new_name, # Ex: cam_patrol_dashboard
                network = request.json.get('network'), # Ex:cp_net
                network_mode = request.json.get('network_mode'), # Ex: Bridge
                ports = request.json.get('ports'), # Ex: 8085/tcp   8084
                restart_policy = request.json.get('restart_policy'), # Ex: On failure   0
                volumes = request.json.get('volumes') # Ex: /app/
            )
        except errors.APIError as err:
            return self.response(422, result ='Error at docker API: ' + str(err))

        except errors.ImageNotFound as err:
            return self.response(422, result ='Error at docker API images: ' + str(err)) 

        except errors.ContainerError as err:
            return self.response(422, result = 'Error at docker API containers: ' + str(err))

        new_container = Container(
            command = request.json.get('command'),
            entrypoint = request.json.get('entrypoint'),
            environment = request.json.get('environment'),
            image = request.json.get('image'),
            name = new_name,
            network = request.json.get('network'),
            network_mode = request.json.get('network_mode'),
            ports = request.json.get('ports'),
            restart_policy = request.json.get('restart_policy'),
            volumes = request.json.get('volumes')
        )

        db.session.add(new_container)
        db.session.commit()

        created_container = db.session.query(Container).filter(Container.name == new_name).first()
        container_id = created_container.id

        return self.response(201, result=container_id)

## ---------------------------------------------------------------------------------------------------
## Grouping 
## ---------------------------------------------------------------------------------------------------

class GroupModelApi(ModelRestApi):
    
    resource_name = "group"
    datamodel = SQLAInterface(Group)

    # Get/View all Groups (+ containers in group) ----------------------------------------------------
    @expose("/", methods=["GET"])
    #@protect()
    def get_groups(self):  
        from app import db
        # Create sqlalchemy query
        groups = db.session.query(Group).all() 

        result = [
            {"id": group.id, "name": group.name}
            for group in groups
        ]

        # return response code
        return self.response(200, result=result)

    # Get/View a Group based on id (+ containers in group) ----------------------------------------------------

    # @expose("/<int:group_id>", methods=["GET"])
    # #@protect
    # def get_group(self, group_id):
    #     from app import db 
    #     id = group_id
    #     return id

    # get containers belonging to a group ----------------------------------------------------
    @expose("/containers/<int:group_id>", methods=["GET"])
    @protect()
    def groupContainers(self, group_id):
        from app import db 

        result = []
        group_containers = db.session.query(GroupContainer).filter(GroupContainer.group_id == group_id).all()
        for group_container in group_containers:
            container = db.session.query(Container).filter(Container.id == group_container.container_id).first()

            try:
                container_from_docker = docker_client.containers.get(container.name)
            except Exception as e:
                container_from_docker = e

            result.append({
                "id": container.id,
                "name": container.name,
                "status": container_from_docker.status,
                "ports": container.ports
            })
        try: 
            return self.response(200, result = result)
        except Exception as e:
            print(e)

    # get containers that don't belong to the group ----------------------------------------------------
    @expose("/availableContainers/<int:group_id>", methods=["GET"])
    @protect()
    def getContainersNotInGroup(self, group_id):
        from app import db 

        result = []
        group_containers = db.session.query(GroupContainer).filter(GroupContainer.group_id != group_id).all()
        container_ids = []
        for group_container in group_containers:
            result.append(group_container.container_id)

        





        return self.response(200, result=result)
  
    # Add a new group ----------------------------------------------------
    @expose("/add", methods=["POST"])
    @protect()   
    def addGroup(self):
        from app import db
        json_data = request.get_json()
        print(json_data)
        

        # if json data is unprocessable
        if ("name" not in request.json):
            print("missing json field")
            return self.response(422, message="Missing required field")
        
        # if group already exists
        elif (db.session.query(Group).filter(Group.name == json_data["name"]).first()) != None:
            return self.response(422, message="A group with this name already exists")
        
        ## Passes Validation
        else:
            new_group = Group(name = json_data["name"])

            db.session.add(new_group)
            db.session.commit()

            return self.response(201, result = "created group")
    
    # Remove an existing group ----------------------------------------------------
    @expose("/remove", methods=["POST"])
    # @protect()   
    def removeGroup(self):
      
        from app import db
        
        # get json data
        json_data = request.get_json()
        print(json_data)

        # if json data is unprocessable
        if ("name" not in request.json):
            print("missing json field")
            return self.response(422, message="Missing required field")
        
        # if group does not exist
        elif (db.session.query(Group).filter(Group.name == json_data["name"]).first()) == None:
            return self.response(422, message="A group with this id does not exist")

        ## Passes Validation
        else: 
            group = db.session.query(Group).filter(Group.id == json_data["id"]).first()
            
            print(group.name)
            db.session.delete(group)
            db.session.commit()

            return self.response(200)  

    # Edit an existing group ----------------------------------------------------
    @expose("/edit/<int:group_id>", methods=["POST"])
    # @protect()   

    ## group_id is variable passed from the url
    def editGroup(self,group_id):
        from app import db
     
        ## bind variables to json values 
        json_data = request.get_json()

        # if json data is unprocessable
        if ("name" not in request.json):
            print("missing json field")
            return self.response(422, message="Missing required field")
        
        # if group does not exist
        elif (db.session.query(Group).filter(Group.name == json_data["id"]).first()) == None:
            return self.response(422, message="A group with this id does not exist")
        
        else:
            # Find group
            group = db.session.query(Group).filter(Group.id == group_id).first()
    
            # bind new group name to the database 
            # (datbase = json name)
            group.name = json_data["name"]

            # commit new results to datbase 
            db.session.commit()
            
            # return success 
            result = ("ok : " + group.name)
            return self.response(200, result=result) 

    ## Add a container to a group ----------------------------------------------------
    @expose("/addContainer", methods=["POST"])
    def addContainer(self):
        from app import db

        json_data = request.get_json()
        print(json_data)

        # if json data is unprocessable
        if ("group_id" and "container_id" in json_data):
            # Creating the group_container link
            g_c = GroupContainer(
                group_id = json_data["group_id"],
                container_id = json_data["container_id"]
            )
            try: 
                db.session.add(g_c)
                db.session.commit()
                print(g_c)

                return self.response(200)
            except Exception as e:
                return self.response(500, message=str(e))

        else:
            return self.response(422, message="Missing required field")


    ## Remove a container from a group ----------------------------------------------------
    @expose("/removeContainer", methods=["POST"])
    def removeContainer(self):
        from app import db

        # get json data 
        json_data = request.get_json()
        print(json_data)

        # match json id to database id
        group = db.session.query(Group).filter(Group.id == json_data["id"]).first()
        
        print(group)
        db.session.delete(group)

        return self.response(200)

